#!/usr/bin/env python
"""Script to generate Mantid Python API documentation.
"""
import inspect
import os
import shutil
import sys

# TODO - just have these off by default for now
HAVE_DOXYLINK = False
#try:
#    import sphinxcontrib.doxylink
#    HAVE_DOXYLINK = True
#except ImportError:
#    pass
HAVE_BREATHE = False
#try:
#    import breathe
#    HAVE_BREATHE = True
#except ImportError:
#    pass

# Append the path to the mantid/mantidplot library
sys.path.append("@CMAKE_RUNTIME_OUTPUT_DIRECTORY@")

# Dictionary of special classnames and what they should actually be to get links
CLASS_DICT = {
    'V3D': ':py:obj:`~mantid.kernel.V3D`'
}
CLASS_DICT_CPP = {
    'DeltaEModeType':             'Mantid::Kernel::DeltaEMode',
    'DeprecatedAlgorithmChecker': 'Mantid::API::DeprecatedAlgorithm',
    'FileAction':                 'Mantid::API::FileProperty',
    'IObjCompAssembly':           'Mantid::Geometry::ObjCompAssembly'
}
CLASS_TEMPLATES_CPP_SUFFIXES = [ # order matters to prevent clashes
    'FilteredTimeSeriesProperty',
    'TimeSeriesProperty',
    'MandatoryValidator',
    'ArrayLengthValidator',
    'WorkspaceProperty',
    'ArrayProperty',
    'ArrayBoundedValidator'
]
CLASS_TEMPLATES_CPP_PREFIXES = [ # order matters to prevent clashes
    'PropertyWithValue'
]

#------------------------------------------------------------------------------

def writeTitle(rstfile, title):
    _title_template = \
"""%(title)s
%(underline)s

"""
    underline = '='*len(title) # Sphinx doesn't like the title underline being incorrect
    rstfile.write(_title_template % {'title':title, 'underline':underline})

def writeDoxygenLink(rstfile, classname):
    _doxy_template = \
"""This a python binding to the C++ class %(classname)s.

"""
    classname = classname.split('.')
    if CLASS_DICT_CPP.has_key(classname[-1]):
        classname = CLASS_DICT_CPP[classname[-1]]
    else:
        for name in CLASS_TEMPLATES_CPP_SUFFIXES:
            if classname[-1].endswith(name):
                classname[-1] = name
                break

        for name in CLASS_TEMPLATES_CPP_PREFIXES:
            if classname[-1].startswith(name):
                classname[-1] = name
                break

        for i in range(len(classname)-1):
            if classname[i].lower() == "api":
                classname[i] = "API"
            elif not classname[i][0].isupper():
                classname[i] = classname[i].title()
        classname = "::".join(classname)

    if HAVE_DOXYLINK: #convert it into a link
        classname = ":mantidcpp:`%s`" % classname
    rstfile.write(_doxy_template % {'classname':classname})

def fixModuleName(modname):
    """
    This fixes the module names, but adding the class at the end will still do 
    the right thing for python.
    """
    # Hack for replaceing qti reference with mantidplot ref
    if 'qti' in modname:
        modname = modname.replace('_qti','mantidplot')

    # Build up the module name and don't reference the "private" modules
    pieces = modname.split('.')
    fqlmod = []
    for p in pieces:
        if not p.startswith('_'):
            fqlmod.append(p)
    return '.'.join(fqlmod)


class ClassAPIWriter(object):
    """Class writer object
    """
    
    _doc_template = \
"""
.. module:`%(modname)s`

.. autoclass:: %(fqlclass)s 
    :members:
    :undoc-members:
    :inherited-members:
"""
    def __init__(self, cls, outputdir, extension):
        if not inspect.isclass(cls):
            raise TypeError("Expected class type, found %s" % str(type(cls)))
        self._filename = os.path.join(outputdir, cls.__name__ + extension)
        self._cls = cls
        
    def write(self):
        rstfile = open(self._filename, 'w')
        classname = self._cls.__name__
        underline = '='*len(classname) # Sphinx doesn't like the title underline being incorrect
        
        # FQL name could contain '_cmodule' aswell, strip this off
        fqlmod = fixModuleName(self._cls.__module__)
        fqlclass = fqlmod + '.' + classname

        # decide whether or not to show the inheritance
        fqlbases = []
        for base in self._cls.__bases__:
            base = str(base.__module__) + '.' + base.__name__
            base = fixModuleName(base) 
            if base.startswith("mantid"):
                fqlbases.append(base)

        methodList = [method for method in dir(object) if callable(getattr(object, method))]
        #print str(self._cls), methodList
        #processFunc = collapse and (lambda s: " ".join(s.split())) or (lambda s: s)
        #print "\n".join(["%s %s" %
        #                 (method.ljust(spacing),
        #                  processFunc(str(getattr(object, method).__doc__)))
        #                 for method in methodList])


        # Write the file
        writeTitle(rstfile, classname)
        writeDoxygenLink(rstfile, fqlclass)
        if len(fqlbases) > 0:
            rstfile.write("*bases:* :py:obj:`%s`\n" % ", ".join(fqlbases))

        rstfile.write(self._doc_template % {'modname':fqlmod, 'fqlclass':fqlclass})
        rstfile.write("\n")
        rstfile.close()
        
    def filename(self):
        return self._filename
        
class FunctionAPIWriter(object):
    """Writes a Sphinx documentation file
       for a given function
    """
    
    _doc_template = \
""".. module:`%(modulename)s`

.. autofunction:: %(modulename)s.%(function)s

"""
    
    def __init__(self, func, outputdir, extension):
        if not inspect.isfunction(func):
            raise TypeError("Expected function type, found %s" % str(type(cls)))
        self._filename = os.path.join(outputdir, func.__name__ + extension)
        self._func = func
        
    def write(self):
        rstfile = open(self._filename, 'w')
        funcname = self._func.__name__
        underline = '='*len(funcname) # Sphinx doesn't like the title underline being incorrect
        # FQL name could contain '_cmodule' aswell, strip this off
        modname = self._func.__module__
        # Hack for replaceing qti reference with mantidplot ref
        if 'qti' in modname:
            modname = modname.replace('_qti','mantidplot')
        
        # Write the file
        writeTitle(rstfile, funcname)
        rstfile.write(self._doc_template % {'modulename':modname,'function':funcname})
        rstfile.close()
        
    def filename(self):
        return self._filename


def generate_api_doc(module, indexfilename):
    """Write the sphinx doc files for a given module
    
        @param module - The module object
        @param indexfilename - A file that will contain an index list of the given files
    """
    
    if os.path.exists(indexfilename):
        indexfile = open(indexfilename, 'a')
    else:
        indexfile = open(indexfilename, 'w')
        indexfile.write(".. AUTO-GENERATED FILE -- DO NOT EDIT!\n\n")
        indexfile.write(".. toctree::\n\n")

    print "Generating %s API docs" % module.__name__
    for name, member in inspect.getmembers(module):
	if name.startswith("_"): continue
        if inspect.isclass(member):
            apiwriter = ClassAPIWriter(member, output_dir, extension)
        elif inspect.isfunction(member):
            apiwriter = FunctionAPIWriter(member, output_dir, extension)
        else:
            continue
        apiwriter.write()
        indexfile.write("   generated/" + os.path.basename(apiwriter.filename()) + "\n")
    indexfile.close()
    print "Done generating API %s docs" % module.__name__

if __name__ == '__main__':
    extension = '.rst'
    apidir = os.path.join(os.path.dirname(__file__), 'source','api')
    output_dir = os.path.join(apidir,'generated')
    if os.path.exists(output_dir):
        # If functions have been removed then sphinx gets confused. Simplest thing is to blow everything away and start again
        shutil.rmtree(output_dir)
    os.mkdir(output_dir)

    import mantid
    indexfilename = os.path.join(apidir, 'automantid.txt')
    if os.path.exists(indexfilename):
        os.remove(indexfilename)
    generate_api_doc(mantid, indexfilename)
    generate_api_doc(mantid.kernel, indexfilename)
    generate_api_doc(mantid.geometry, indexfilename)
    generate_api_doc(mantid.api, indexfilename)
    generate_api_doc(mantid.simpleapi, indexfilename)

    try:
        import mantidplot
        indexfilename = os.path.join(apidir, 'automantidplot.txt')
        generate_api_doc(mantidplot, indexfilename)
    except:
        import warnings
        warnings.warn("Unable to import mantidplot. No api documentation will be generated for MantidPlot")


    
