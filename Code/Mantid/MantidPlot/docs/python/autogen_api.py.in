#!/usr/bin/env python
"""Script to generate Mantid Python API documentation.
"""
import inspect
import os
import shutil
import sys

# Append the path to the mantid/mantidplot library
sys.path.append("@CMAKE_RUNTIME_OUTPUT_DIRECTORY@")

#------------------------------------------------------------------------------

class ClassAPIWriter(object):
    """Class writer object
    """
    
    _doc_template = \
"""%(title)s
%(underline)s

.. module:`%(modname)s`

.. autoclass:: %(fqlclass)s
    :members:
    :undoc-members:
    :inherited-members:

"""
    def __init__(self, cls, outputdir, extension):
        if not inspect.isclass(cls):
            raise TypeError("Expected class type, found %s" % str(type(cls)))
        self._filename = os.path.join(outputdir, cls.__name__ + extension)
        self._cls = cls
        
    def write(self):
        rstfile = open(self._filename, 'w')
        classname = self._cls.__name__
        underline = '='*len(classname) # Sphinx doesn't like the title underline being incorrect
        
        # FQL name could contain '_cmodule' aswell, strip this off
        modname = self._cls.__module__

        # Hack for replaceing qti reference with mantidplot ref
        if 'qti' in modname:
            modname = modname.replace('_qti','mantidplot')
        # Build up the module name and don't reference the "private" modules
        pieces = modname.split('.')
        fqlmod = ''
        for p in pieces:
            if not p.startswith('_'):
                fqlmod += p + '.'
        fqlclass = fqlmod + classname
        fqlmod = fqlmod.rstrip('.') 

        # Write the file
        rstfile.write(self._doc_template % {'title':classname, 'underline':underline,'modname':fqlmod, 'fqlclass':fqlclass})
        rstfile.close()
        
    def filename(self):
        return self._filename
        
class FunctionAPIWriter(object):
    """Writes a Sphinx documentation file
       for a given function
    """
    
    _doc_template = \
"""%(title)s
%(underline)s

.. module:`%(modulename)s`

.. autofunction:: %(modulename)s.%(function)s

"""
    
    def __init__(self, func, outputdir, extension):
        if not inspect.isfunction(func):
            raise TypeError("Expected function type, found %s" % str(type(cls)))
        self._filename = os.path.join(outputdir, func.__name__ + extension)
        self._func = func
        
    def write(self):
        rstfile = open(self._filename, 'w')
        funcname = self._func.__name__
        underline = '='*len(funcname) # Sphinx doesn't like the title underline being incorrect
        # FQL name could contain '_cmodule' aswell, strip this off
        modname = self._func.__module__
        # Hack for replaceing qti reference with mantidplot ref
        if 'qti' in modname:
            modname = modname.replace('_qti','mantidplot')
        
        # Write the file
        rstfile.write(self._doc_template % {'title':funcname, 'underline':underline,\
					    'modulename':modname,'function':funcname})
        rstfile.close()
        
    def filename(self):
        return self._filename


def generate_api_doc(module, indexfilename):
    """Write the sphinx doc files for a given module
    
        @param module - The module object
        @param indexfilename - A file that will contain an index list of the given files
    """
    
    if os.path.exists(indexfilename):
        indexfile = open(indexfilename, 'a')
    else:
        indexfile = open(indexfilename, 'w')
        indexfile.write(".. AUTO-GENERATED FILE -- DO NOT EDIT!\n\n")
        indexfile.write(".. toctree::\n\n")

    print "Generating %s API docs" % module.__name__
    for name, member in inspect.getmembers(module):
	if name.startswith("_"): continue
        if inspect.isclass(member):
            apiwriter = ClassAPIWriter(member, output_dir, extension)
        elif inspect.isfunction(member):
            apiwriter = FunctionAPIWriter(member, output_dir, extension)
        else:
            continue
        apiwriter.write()
        indexfile.write("   generated/" + os.path.basename(apiwriter.filename()) + "\n")
    indexfile.close()
    print "Done generating API %s docs" % module.__name__

if __name__ == '__main__':
    extension = '.rst'
    apidir = os.path.join(os.path.dirname(__file__), 'source','api')
    output_dir = os.path.join(apidir,'generated')
    if os.path.exists(output_dir):
        # If functions have been removed then sphinx gets confused. Simplest thing is to blow everything away and start again
        shutil.rmtree(output_dir)
    os.mkdir(output_dir)

    import mantid
    indexfilename = os.path.join(apidir, 'automantid.txt')
    if os.path.exists(indexfilename):
        os.remove(indexfilename)
    generate_api_doc(mantid, indexfilename)
    generate_api_doc(mantid.kernel, indexfilename)
    generate_api_doc(mantid.geometry, indexfilename)
    generate_api_doc(mantid.api, indexfilename)
    generate_api_doc(mantid.simpleapi, indexfilename)

    try:
        import mantidplot
        indexfilename = os.path.join(apidir, 'automantidplot.txt')
        generate_api_doc(mantidplot, indexfilename)
    except:
        import warnings
        warnings.warn("Unable to import mantidplot. No api documentation will be generated for MantidPlot")


    
